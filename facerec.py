# facerec.py
import cv2, sys, numpy, os, pickle, time
# Lower size value for better accuracy at cost of speed
size = 2
fn_haar = 'haarcascade_frontalface_default.xml'
(im_width, im_height) = (200, 240)
(images, lables, names, id) = ([], [], {}, 0)
global mode, personCurrent
mode = None
personCurrent = None

# Load names and training data generated by train.py
with open("names.txt", 'rb') as f:
    names = pickle.load(f)
model = cv2.createFisherFaceRecognizer()
model.load('trainingdata.xml')

# Use fisherRecognizer on camera stream
haar_cascade = cv2.CascadeClassifier(fn_haar)
webcam = cv2.VideoCapture(0)

#framerate
webcam.set(5,1)

while True:
    (rval, frame) = webcam.read()
    
    # flip the image
    frame=cv2.flip(frame,1,0)
    
    # ensure there is a video feed before continuing otherwise error will occur
    if not rval : continue
    
    # convert to grayscale and resize    
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    mini = cv2.resize(gray, (gray.shape[1] / size, gray.shape[0] / size))
    faces = haar_cascade.detectMultiScale(mini)

    # If there are no faces
    if not len(faces):
        mode = 'sleep'
        print mode        

    # If there are faces
    if (mode != 'active') or (personCurrent == 'unknown'):
        for i in range(len(faces)):
            mode = 'active'
            face_i = faces[i]
            (x, y, w, h) = [v * size for v in face_i]
            face = gray[y:y + h, x:x + w]
            face_resize = cv2.resize(face, (im_width, im_height))

            # Try to recognize the face
            prediction = model.predict(face_resize)              

            if prediction[1] > 3000:
                #print '%s - %.0f' % (names[prediction[0]],prediction[1]) 
                personCurrent =  names[prediction[0]]
                print personCurrent
                # allow pause in case person temporarily is unrecognised or turns their head away
                time.sleep(3)
            else:            
                personCurrent = 'unknown'
                print personCurrent               

            #print mode                
            
    #cv2.imshow('OpenCV', frame)
       
    # key = cv2.waitKey(10)
    # if key == 27:
    #     break
    #add delay
    #time.sleep(1)